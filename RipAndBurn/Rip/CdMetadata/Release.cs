// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using RipAndBurn.Rip.CDMetadata;
//
//    var cdMetadata = CdMetadata.FromJson(jsonString);

namespace RipAndBurn.Rip.CDMetadata.Release
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Media
    {
        [JsonProperty("track-count", NullValueHandling = NullValueHandling.Ignore)]
        public long? TrackCount { get; set; }

        [JsonProperty("format", NullValueHandling = NullValueHandling.Ignore)]
        public string Format { get; set; }

        [JsonProperty("format-id", NullValueHandling = NullValueHandling.Ignore)]
        public Guid? FormatId { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("position", NullValueHandling = NullValueHandling.Ignore)]
        public long? Position { get; set; }

        [JsonProperty("discs", NullValueHandling = NullValueHandling.Ignore)]
        public List<AllReleases> Discs { get; set; }
    }

    public partial class Release
    {
        [JsonProperty("release-events", NullValueHandling = NullValueHandling.Ignore)]
        public List<ReleaseEvent> ReleaseEvents { get; set; }

        [JsonProperty("status-id", NullValueHandling = NullValueHandling.Ignore)]
        public Guid? StatusId { get; set; }

        [JsonProperty("barcode", NullValueHandling = NullValueHandling.Ignore)]
        public string Barcode { get; set; }

        [JsonProperty("date", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Date { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public Guid? Id { get; set; }

        [JsonProperty("cover-art-archive", NullValueHandling = NullValueHandling.Ignore)]
        public CoverArtArchive CoverArtArchive { get; set; }

        [JsonProperty("packaging")]
        public string Packaging { get; set; }

        [JsonProperty("media", NullValueHandling = NullValueHandling.Ignore)]
        public List<Media> Media { get; set; }

        [JsonProperty("disambiguation", NullValueHandling = NullValueHandling.Ignore)]
        public string Disambiguation { get; set; }

        [JsonProperty("title", NullValueHandling = NullValueHandling.Ignore)]
        public string Title { get; set; }

        [JsonProperty("packaging-id")]
        public Guid? PackagingId { get; set; }

        [JsonProperty("country", NullValueHandling = NullValueHandling.Ignore)]
        public string Country { get; set; }

        [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
        public string Status { get; set; }

        [JsonProperty("quality", NullValueHandling = NullValueHandling.Ignore)]
        public string Quality { get; set; }

        [JsonProperty("asin")]
        public string Asin { get; set; }

        [JsonProperty("text-representation", NullValueHandling = NullValueHandling.Ignore)]
        public TextRepresentation TextRepresentation { get; set; }
    }

    public partial class AllReleases
    {
        [JsonProperty("releases", NullValueHandling = NullValueHandling.Ignore)]
        public List<Release> Releases { get; set; }

        [JsonProperty("offset-count", NullValueHandling = NullValueHandling.Ignore)]
        public long? OffsetCount { get; set; }

        [JsonProperty("sectors", NullValueHandling = NullValueHandling.Ignore)]
        public long? Sectors { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        [JsonProperty("offsets", NullValueHandling = NullValueHandling.Ignore)]
        public List<long> Offsets { get; set; }
    }

    public partial class CoverArtArchive
    {
        [JsonProperty("back", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Back { get; set; }

        [JsonProperty("darkened", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Darkened { get; set; }

        [JsonProperty("front", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Front { get; set; }

        [JsonProperty("count", NullValueHandling = NullValueHandling.Ignore)]
        public long? Count { get; set; }

        [JsonProperty("artwork", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Artwork { get; set; }
    }

    public partial class ReleaseEvent
    {
        [JsonProperty("area", NullValueHandling = NullValueHandling.Ignore)]
        public Area Area { get; set; }

        [JsonProperty("date", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Date { get; set; }
    }

    public partial class Area
    {
        [JsonProperty("disambiguation", NullValueHandling = NullValueHandling.Ignore)]
        public string Disambiguation { get; set; }

        [JsonProperty("iso-3166-1-codes", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Iso31661Codes { get; set; }

        [JsonProperty("sort-name", NullValueHandling = NullValueHandling.Ignore)]
        public string SortName { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public Guid? Id { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }
    }

    public partial class TextRepresentation
    {
        [JsonProperty("script", NullValueHandling = NullValueHandling.Ignore)]
        public string Script { get; set; }

        [JsonProperty("language", NullValueHandling = NullValueHandling.Ignore)]
        public string Language { get; set; }
    }

    public partial class AllReleases
    {
        public static AllReleases FromJson(string json) => JsonConvert.DeserializeObject<AllReleases>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this AllReleases self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}

